Texture2D    g_Texture;
SamplerState g_Texture_sampler;  // By convention, texture samplers must use the '_sampler' suffix

cbuffer FSRConstants
{
    uint2 inputSize;
    uint2 outSize;
};

struct PSInput 
{ 
    float4 Pos : SV_POSITION; 
    float2 UV : TEX_COORD; 
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

#define A_GPU 1
#define A_HLSL 1
#include "ffx_a.h"

#define FSR_RCAS_F 1

AF4 FsrRcasLoadF(ASU2 p) { return g_Texture.Load(int3(ASU2(p), 0)); }

void FsrRcasInputF(inout AF1 r, inout AF1 g, inout AF1 b) {}

#include "ffx_fsr1.h"

void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    AU4 con0;

    float fsrSharpening = 0.0;
    FsrRcasCon(con0, fsrSharpening);

    AU2 gxy = AU2(PSIn.UV.xy * outSize.xy); // Integer pixel position in output.
    AF3 Gamma2Color = AF3(0, 0, 0);
    FsrRcasF(Gamma2Color.r, Gamma2Color.g, Gamma2Color.b, gxy, con0);

    PSOut.Color = float4(Gamma2Color, 1.0);
}
