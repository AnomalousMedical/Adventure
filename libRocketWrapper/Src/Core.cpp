#include "StdAfx.h"
#include <Rocket/Core.h>

/// Initialises Rocket.
extern "C" _AnomalousExport bool Core_Initialise()
{
	return Rocket::Core::Initialise();
}

/// Shutdown Rocket.
extern "C" _AnomalousExport void Core_Shutdown()
{
	return Rocket::Core::Shutdown();
}

/// Returns the version of this Rocket library.
/// @return The version number.
extern "C" _AnomalousExport String Core_GetVersion()
{
	return Rocket::Core::GetVersion().CString();
}

/// Sets the interface through which all system requests are made. This must be called before Initialise().
/// @param[in] system_interface The application-specified logging interface.
extern "C" _AnomalousExport void Core_SetSystemInterface(Rocket::Core::SystemInterface* system_interface)
{
	return Rocket::Core::SetSystemInterface(system_interface);
}

/// Returns Rocket's system interface.
/// @return Rocket's system interface.
extern "C" _AnomalousExport Rocket::Core::SystemInterface* Core_GetSystemInterface()
{
	return Rocket::Core::GetSystemInterface();
}

/// Sets the interface through which all rendering requests are made. This is not required to be called, but if it is
/// it must be called before Initialise(). If no render interface is specified, then all contexts must have a custom
/// render interface.
/// @param[in] render_interface Render interface implementation.
extern "C" _AnomalousExport void Core_SetRenderInterface(Rocket::Core::RenderInterface* render_interface)
{
	return Rocket::Core::SetRenderInterface(render_interface);
}

/// Returns Rocket's default's render interface.
/// @return Rocket's render interface.
extern "C" _AnomalousExport Rocket::Core::RenderInterface* Core_GetRenderInterface()
{
	return Rocket::Core::GetRenderInterface();
}

/// Sets the interface through which all file I/O requests are made. This is not required to be called, but if it is it
/// must be called before Initialise().
/// @param[in] file_interface The application-specified file interface
extern "C" _AnomalousExport void Core_SetFileInterface(Rocket::Core::FileInterface* file_interface)
{
	return Rocket::Core::SetFileInterface(file_interface);
}

/// Returns Rocket's file interface.
/// @return Rocket's file interface.
extern "C" _AnomalousExport Rocket::Core::FileInterface* Core_GetFileInterface()
{
	return Rocket::Core::GetFileInterface();
}

/// Creates a new element context.
/// @param[in] name The new name of the context. This must be unique.
/// @param[in] dimensions The initial dimensions of the new context.
/// @param[in] render_interface The custom render interface to use, or NULL to use the default.
/// @return The new context, or NULL if the context could not be created.
extern "C" _AnomalousExport Rocket::Core::Context* Core_CreateContext(String name, Vector2i dimensions, Rocket::Core::RenderInterface* render_interface)
{
	return Rocket::Core::CreateContext(name, dimensions.toVector2i(), render_interface);
}

/// Fetches a previously constructed context by name.
/// @param[in] name The name of the desired context.
/// @return The desired context, or NULL if no context exists with the given name.
extern "C" _AnomalousExport Rocket::Core::Context* Core_GetContext(String name)
{
	return Rocket::Core::GetContext(name);
}

/// Fetches a context by index.
/// @param[in] index The index of the desired context. If this is outside of the valid range of contexts, it will be clamped.
/// @return The requested context, or NULL if no contexts exist.
extern "C" _AnomalousExport Rocket::Core::Context* Core_GetContext_Index(int index)
{
	return Rocket::Core::GetContext(index);
}

/// Returns the number of active contexts.
/// @return The total number of active Rocket contexts.
extern "C" _AnomalousExport int Core_GetNumContexts()
{
	return Rocket::Core::GetNumContexts();
}

/// Registers a generic Rocket plugin.
extern "C" _AnomalousExport void Core_RegisterPlugin(Rocket::Core::Plugin* plugin)
{
	return Rocket::Core::RegisterPlugin(plugin);
}

/// Forces all compiled geometry handles generated by libRocket to be released.
extern "C" _AnomalousExport void Core_ReleaseCompiledGeometries()
{
	return Rocket::Core::ReleaseCompiledGeometries();
}

/// Forces all texture handles loaded and generated by libRocket to be released.
extern "C" _AnomalousExport void Core_ReleaseTextures()
{
	return Rocket::Core::ReleaseTextures();
}